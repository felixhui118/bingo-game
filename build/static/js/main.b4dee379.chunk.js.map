{"version":3,"sources":["app/hooks.ts","reducer/bingo/bingoSlice.ts","components/bingoMap/bingoItem/BingoItem.tsx","components/bingoMap/bingoEffect/BingoEffect.tsx","components/bingoMap/BingoMap.tsx","services/bingoAPI.ts","components/bingoHost/BingoHost.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","bingoSlice","createSlice","name","initialState","size","mapContent","latestPickItem","selectedItems","diagonalBingoPatterns","bingoItems","reducers","setLatestPickItem","state","action","payload","setSelectedItems","push","setBingoItems","concat","initialBingo","bingMapContent","itemIndex","pattern","i","extraReducers","builder","actions","getSize","bingo","getSelectedItems","getlatestPickItem","getDiagonalBingoPatterns","getBingoItems","BingoItem","content","index","id","useState","isSelected","setIsSelected","dispatch","className","includes","onClick","BingEffect","count","runEffect","setRunEffect","useEffect","setTimeout","config","BingoMap","bingoCount","setBingoCount","setBingMapContent","checkBingo","length","xstart","Math","ceil","ystart","binggoPatterns","bingoNumber","forEach","getBingoPatterns","bingoPattern","result","filter","number","console","log","bingoContents","bingoContentJSON","sort","random","slice","getBingoMap","contents","bingoNode","j","toString","renderBingoMap","BingoHost","setBingoContents","usedContents","setUsedContents","pop","item","shift","map","value","App","userType","setUserType","store","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4dee379.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\n\nexport interface BingoState {\n  size: number;\n  mapContent: (string | number)[];\n  latestPickItem: number;\n  selectedItems: number[];\n  diagonalBingoPatterns: number[][];\n  bingoItems: number[];\n}\n\nconst initialState: BingoState = {\n  size: 5,\n  mapContent: [],\n  latestPickItem: 0,\n  selectedItems: [],\n  diagonalBingoPatterns: [],\n  bingoItems: [],\n};\n\nexport const bingoSlice = createSlice({\n  name: \"bingo\",\n  initialState,\n  reducers: {\n    setLatestPickItem: (state, action: PayloadAction<number>) => {\n      state.latestPickItem = action.payload;\n    },\n    setSelectedItems: (state, action: PayloadAction<number>) => {\n      state.selectedItems.push(action.payload);\n    },\n    setBingoItems: (\n      state,\n      action: PayloadAction<{\n        bingoItems: number[];\n      }>\n    ) => {\n      state.bingoItems = state.bingoItems.concat(\n        state.bingoItems,\n        action.payload.bingoItems\n      );\n    },\n    initialBingo: (\n      state,\n      action: PayloadAction<{\n        size: number;\n        bingMapContent: (string | number)[];\n      }>\n    ) => {\n      state.size = action.payload.size;\n      state.mapContent = action.payload.bingMapContent;\n\n      let itemIndex = 1;\n      let pattern = [itemIndex];\n      for (let i = 0; i < action.payload.size - 1; i++) {\n        pattern.push((itemIndex += action.payload.size + 1));\n      }\n      state.diagonalBingoPatterns.push(pattern);\n\n      itemIndex = action.payload.size;\n      pattern = [itemIndex];\n      for (let i = 0; i < action.payload.size - 1; i++) {\n        pattern.push((itemIndex += action.payload.size - 1));\n      }\n      state.diagonalBingoPatterns.push(pattern);\n    },\n  },\n  extraReducers: (builder) => {},\n});\n\nexport const {\n  initialBingo,\n  setSelectedItems,\n  setLatestPickItem,\n  setBingoItems,\n} = bingoSlice.actions;\n\nexport const getSize = (state: RootState) => state.bingo.size;\nexport const getSelectedItems = (state: RootState) => state.bingo.selectedItems;\nexport const getlatestPickItem = (state: RootState) =>\n  state.bingo.latestPickItem;\nexport const getDiagonalBingoPatterns = (state: RootState) =>\n  state.bingo.diagonalBingoPatterns;\n\nexport const getBingoItems = (state: RootState) => state.bingo.bingoItems;\n\nexport default bingoSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"../../../app/hooks\";\nimport {\n  setLatestPickItem,\n  setSelectedItems,\n  getBingoItems,\n} from \"../../../reducer/bingo/bingoSlice\";\n\nfunction BingoItem({\n  content,\n  id,\n  index,\n}: {\n  content: string;\n  id: number;\n  index: number;\n}) {\n  const [isSelected, setIsSelected] = useState<boolean>(false);\n  const bingoItems = useAppSelector(getBingoItems);\n\n  const dispatch = useAppDispatch();\n  const onClickhandler = (latestPickItem: number): void => {\n    if (!isSelected) {\n      setIsSelected(true);\n      dispatch(setSelectedItems(latestPickItem));\n      dispatch(setLatestPickItem(latestPickItem));\n    }\n  };\n  return (\n    <div\n      className={`grid ${isSelected ? \"selected\" : \"\"} ${\n        bingoItems.includes(index) ? \"bingo\" : \"\"\n      }`}\n      onClick={() => onClickhandler(index)}\n    >\n      <div>{content}</div>\n    </div>\n  );\n}\n\nexport default BingoItem;\n","import React, { useState, useEffect } from \"react\";\nimport \"./bingoEffect.css\";\n\nfunction BingEffect({ count }: { count: number }) {\n  const [runEffect, setRunEffect] = useState<boolean>(false);\n  const initEffect = () => {\n    setRunEffect(true);\n  };\n  const resetEffect = () => {\n    setRunEffect(false);\n  };\n  useEffect(() => {\n    if (count > 0) {\n      initEffect();\n      setTimeout(() => {\n        resetEffect();\n      }, 1500);\n    }\n  }, [count]);\n  return (\n    <div>\n      {runEffect && (\n        <div className=\"bingo-effect-container \">\n          <div className=\"text\">\n            <div className=\"animate-text\">\n              <span>B</span>\n              <span>I</span>\n              <span>N</span>\n              <span>G</span>\n              <span>O</span>\n              {count > 0 && (\n                <span className=\"bingo-count\">\n                  <span className=\"x\">x</span> {count}\n                </span>\n              )}\n            </div>\n          </div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n          <div className=\"confetti\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default BingEffect;\n","import React, { useState, useEffect } from \"react\";\nimport BingoItem from \"./bingoItem/BingoItem\";\nimport BingEffect from \"./bingoEffect/BingoEffect\";\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport {\n  initialBingo,\n  setBingoItems,\n  getSize,\n  getlatestPickItem,\n  getSelectedItems,\n  getDiagonalBingoPatterns,\n} from \"../../reducer/bingo/bingoSlice\";\nimport { getBingoMap } from \"../../services/bingoAPI\";\nimport \"./bingoMap.css\";\n\nconst config = {\n  size: 5,\n};\n\nfunction BingoMap() {\n  const [bingoCount, setBingoCount] = useState<number>(0);\n\n  const [bingMapContent, setBingMapContent] = useState<(string | number)[]>([]);\n\n  const size = useAppSelector(getSize);\n  const selectedItems = useAppSelector(getSelectedItems);\n  const latestPickItem = useAppSelector(getlatestPickItem);\n  const diagonalBingoPatterns = useAppSelector(getDiagonalBingoPatterns);\n  const dispatch = useAppDispatch();\n  const getBingoPatterns = (latestPickItem: number) => {\n    const xstart = Math.ceil(latestPickItem / size - 1) * size + 1;\n    const ystart = latestPickItem - Math.ceil(latestPickItem / size - 1) * size;\n    const binggoPatterns = [];\n\n    let bingoNumber = xstart;\n    let pattern = [bingoNumber];\n    for (let i = 0; i < size - 1; i++) {\n      pattern.push((bingoNumber += 1));\n    }\n    binggoPatterns.push(pattern);\n\n    bingoNumber = ystart;\n    pattern = [bingoNumber];\n    for (let i = 0; i < size - 1; i++) {\n      pattern.push((bingoNumber += size));\n    }\n    binggoPatterns.push(pattern);\n    diagonalBingoPatterns.forEach((pattern) => {\n      if (pattern.includes(latestPickItem)) {\n        binggoPatterns.push(pattern);\n      }\n    });\n\n    return binggoPatterns;\n  };\n\n  const checkBingo = (latestPickItem: number): void => {\n    let count = 0;\n    if (latestPickItem && selectedItems.length >= size) {\n      const bingoPatterns = getBingoPatterns(latestPickItem);\n      bingoPatterns.forEach((bingoPattern) => {\n        const result = bingoPattern.filter((number) => {\n          return selectedItems.includes(number);\n        });\n        if (result.length === size) {\n          count++;\n          console.log(result);\n          dispatch(setBingoItems({ bingoItems: result }));\n        }\n      });\n    }\n    setBingoCount(bingoCount + count);\n  };\n\n  useEffect(() => {\n    latestPickItem > 0 && checkBingo(latestPickItem);\n  }, [latestPickItem]);\n\n  useEffect(() => {\n    bingMapContent &&\n      bingMapContent.length > 0 &&\n      dispatch(initialBingo({ size: 5, bingMapContent }));\n  }, [bingMapContent]);\n\n  useEffect(() => {\n    setBingMapContent(getBingoMap(config.size));\n  }, []);\n\n  const renderBingoMap = (size: number, contents: (string | number)[]) => {\n    let bingoNode = [];\n\n    if (contents && contents.length > 0) {\n      for (let i: number = 0; i < size; i++) {\n        for (let j: number = 0; j < size; j++) {\n          const id = i * size + j + 1;\n          bingoNode.push(\n            <BingoItem\n              key={id.toString()}\n              content={contents[id - 1].toString()}\n              index={id}\n              id={id}\n            />\n          );\n        }\n      }\n    }\n    return bingoNode;\n  };\n  return (\n    <div className=\"bingo-container\">\n      <BingEffect count={bingoCount} />\n      <div className=\"grid-container\">\n        {renderBingoMap(size, bingMapContent)}\n      </div>\n    </div>\n  );\n}\n\nexport default BingoMap;\n","import bingoContentJSON from \"./bingoContents.json\";\n\n//get full bingoContents\nexport const getBingoContents = () => {\n  return bingoContentJSON.content;\n};\n\n//get specify number of content based on the bingo map size\nexport const getBingoMap = (size: number) => {\n  let bingoContents = bingoContentJSON.content;\n\n  bingoContents = bingoContents.sort(() => Math.random() - 0.5);\n\n  return bingoContents.slice(0, size * size);\n};\n","import React, { useState, useEffect } from \"react\";\nimport { getBingoContents } from \"../../services/bingoAPI\";\nimport \"./bingoHost.css\";\n\nfunction BingoHost() {\n  const [bingoContents, setBingoContents] = useState<(string | number)[]>([]);\n  const [usedContents, setUsedContents] = useState<(string | number)[]>([]);\n  useEffect(() => {\n    setBingoContents(getBingoContents().sort(() => Math.random() - 0.5));\n  }, [setBingoContents]);\n  return (\n    <div className=\"used-content-container\">\n      <div className=\"latest-pick\">{[...usedContents].pop()}</div>\n      <div>\n        <button\n          className=\"button\"\n          onClick={() => {\n            if (bingoContents && bingoContents.length > 0) {\n              const item = bingoContents.shift();\n              item && setUsedContents([...usedContents, item]);\n            }\n          }}\n        >\n          Get Number ({bingoContents.length})\n        </button>\n      </div>\n      <div className=\"used-content-list\">\n        {usedContents.length > 0 &&\n          usedContents.map((value) => <span>{value}</span>)}\n      </div>\n    </div>\n  );\n}\n\nexport default BingoHost;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport BingoMap from \"./components/bingoMap/BingoMap\";\n\nimport BingoHost from \"./components/bingoHost/BingoHost\";\n\nfunction App() {\n  const [userType, setUserType] = useState<\"host\" | \"player\" | null>(null);\n  return (\n    <div className=\"App\">\n      {!userType && (\n        <div>\n          <span className=\"instruction-text\">\n            {\" \"}\n            I am a{\" \"}\n            <button className=\"host button\" onClick={() => setUserType(\"host\")}>\n              Host\n            </button>\n            /\n            <button\n              className=\"player button\"\n              onClick={() => setUserType(\"player\")}\n            >\n              Player\n            </button>\n          </span>\n        </div>\n      )}\n\n      {userType === \"host\" && <BingoHost />}\n      {userType === \"player\" && <BingoMap />}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../reducer/bingo/bingoSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    bingo: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}